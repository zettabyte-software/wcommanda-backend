name: Deploy

on:
  push:
    branches:
      - main
      - sandbox
      - dev
  pull_request:
    branches:
      - main

jobs:
  Deploy:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: wcommanda
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      # django
      DJANGO_DEBUG: "True"
      DJANGO_MODE: development
      DJANGO_EXECUTION_MODE: safety
      DJANGO_LOG_LEVE: INFO

      # database
      DATABASE_HOST: localhost
      DATABASE_NAME: wcommanda
      DATABASE_USER: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_PORT: 5432

      # redis
      REDIS_HOST: localhost
      REDIS_PORT: 6379

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Python Setup
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Criar pasta de logs
        run: |
          mkdir -p logs

      - name: Instalar dependÃªncias
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Migrations
        run: |
          python manage.py migrate

      - name: Testes
        run: |
          pytest

      - name: Instalar ssh keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} > ~/.ssh/known_hosts

      - name: Deploy
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd ${{ secrets.WORK_DIR }} && git pull && cd ../ && docker compose up --build -d api criar_ambiente_server"

      - name: Cleanup
        run: rm -rf ~/.ssh
