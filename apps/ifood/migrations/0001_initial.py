# Generated by Django 5.1.5 on 2025-01-31 19:36

import django.db.models.deletion
import django.db.models.manager
import django_lifecycle.mixins
import django_multitenant.fields
import django_multitenant.mixins
import django_multitenant.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('assinaturas', '0002_initial'),
        ('filiais', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='CategoriaIfood',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ativo', models.BooleanField(default=True, verbose_name='ativo')),
                ('codigo', models.PositiveBigIntegerField(default=1, editable=False, verbose_name='código')),
                ('data_criacao', models.DateField(auto_now_add=True, verbose_name='data de criação')),
                ('hora_criacao', models.TimeField(auto_now_add=True, verbose_name='hora de criação')),
                ('data_ultima_alteracao', models.DateField(auto_now=True, verbose_name='data da última alteração')),
                ('hora_ultima_alteracao', models.TimeField(auto_now=True, verbose_name='hora da última alteração')),
                ('cd_ifood_id', models.UUIDField(null=True, verbose_name='id iFood')),
                ('cd_template', models.CharField(default='DEFAULT', max_length=7, verbose_name='template')),
                ('cd_index', models.PositiveSmallIntegerField(default=1, verbose_name='index')),
                ('cd_sequence', models.PositiveSmallIntegerField(default=1, verbose_name='sequência')),
            ],
            options={
                'verbose_name': 'Dados da Categoria do Produto do iFood',
                'verbose_name_plural': 'Dados das Categoria dos Produtos do iFood',
                'db_table': 'dados_categoria_ifood',
                'ordering': ['-id'],
            },
            bases=(django_multitenant.mixins.TenantModelMixin, django_lifecycle.mixins.LifecycleModelMixin, models.Model),
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
                ('objects', django_multitenant.models.TenantManager()),
            ],
        ),
        migrations.CreateModel(
            name='PedidoIfood',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ativo', models.BooleanField(default=True, verbose_name='ativo')),
                ('codigo', models.PositiveBigIntegerField(default=1, editable=False, verbose_name='código')),
                ('data_criacao', models.DateField(auto_now_add=True, verbose_name='data de criação')),
                ('hora_criacao', models.TimeField(auto_now_add=True, verbose_name='hora de criação')),
                ('data_ultima_alteracao', models.DateField(auto_now=True, verbose_name='data da última alteração')),
                ('hora_ultima_alteracao', models.TimeField(auto_now=True, verbose_name='hora da última alteração')),
                ('fd_ifood_id', models.UUIDField(verbose_name='id do pedido no iFood')),
                ('fd_teste', models.BooleanField(default=False, verbose_name='é pedido de teste')),
                ('fd_cep', models.CharField(max_length=8, verbose_name='cep')),
                ('fd_estado', models.CharField(max_length=2, verbose_name='estado')),
                ('fd_cidade', models.CharField(max_length=40, verbose_name='cidade')),
                ('fd_bairro', models.CharField(max_length=30, verbose_name='bairro')),
                ('fd_rua', models.CharField(max_length=15, verbose_name='rua')),
                ('fd_numero', models.CharField(max_length=8, verbose_name='número')),
                ('fd_complemento', models.CharField(blank=True, default='', max_length=350, verbose_name='complemento')),
                ('fd_nome_cliente', models.CharField(blank=True, default='', max_length=120, verbose_name='nome do cliente')),
                ('fd_documento_cliente', models.CharField(blank=True, default='', max_length=20, verbose_name='documento do cliente')),
                ('fd_telefone_cliente', models.CharField(blank=True, default='', max_length=15, verbose_name='telefone do cliente')),
            ],
            options={
                'verbose_name': 'Pedido do iFood',
                'verbose_name_plural': 'Pedidos do iFood',
                'db_table': 'pedido_ifood',
                'ordering': ['-id'],
            },
            bases=(django_multitenant.mixins.TenantModelMixin, django_lifecycle.mixins.LifecycleModelMixin, models.Model),
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
                ('objects', django_multitenant.models.TenantManager()),
            ],
        ),
        migrations.CreateModel(
            name='PedidoItemComplementoIfood',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ativo', models.BooleanField(default=True, verbose_name='ativo')),
                ('codigo', models.PositiveBigIntegerField(default=1, editable=False, verbose_name='código')),
                ('data_criacao', models.DateField(auto_now_add=True, verbose_name='data de criação')),
                ('hora_criacao', models.TimeField(auto_now_add=True, verbose_name='hora de criação')),
                ('data_ultima_alteracao', models.DateField(auto_now=True, verbose_name='data da última alteração')),
                ('hora_ultima_alteracao', models.TimeField(auto_now=True, verbose_name='hora da última alteração')),
                ('pf_ifood_id', models.UUIDField(verbose_name='id do complemento do item no iFood')),
                ('pf_nome', models.CharField(default='', max_length=150, verbose_name='nome')),
                ('pf_quantidade', models.PositiveSmallIntegerField(verbose_name='quantidade')),
                ('pf_tipo', models.CharField(default='', max_length=20, verbose_name='unidade')),
                ('pf_preco_unitario', models.FloatField(verbose_name='preço unitário')),
                ('pf_preco', models.FloatField(verbose_name='preço total')),
            ],
            options={
                'verbose_name': 'Customização do Item do Pedido do iFood',
                'verbose_name_plural': 'Customizações dos Itens dos Pedidos do iFood',
                'db_table': 'pedido_item_customizacao_ifood',
                'ordering': ['-id'],
            },
            bases=(django_multitenant.mixins.TenantModelMixin, django_lifecycle.mixins.LifecycleModelMixin, models.Model),
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
                ('objects', django_multitenant.models.TenantManager()),
            ],
        ),
        migrations.CreateModel(
            name='PedidoItemIfood',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ativo', models.BooleanField(default=True, verbose_name='ativo')),
                ('codigo', models.PositiveBigIntegerField(default=1, editable=False, verbose_name='código')),
                ('data_criacao', models.DateField(auto_now_add=True, verbose_name='data de criação')),
                ('hora_criacao', models.TimeField(auto_now_add=True, verbose_name='hora de criação')),
                ('data_ultima_alteracao', models.DateField(auto_now=True, verbose_name='data da última alteração')),
                ('hora_ultima_alteracao', models.TimeField(auto_now=True, verbose_name='hora da última alteração')),
                ('ft_ifood_id', models.UUIDField(verbose_name='id do item do pedido no iFood')),
                ('ft_index', models.PositiveSmallIntegerField(default=0, verbose_name='index do item do pedido no iFood')),
                ('ft_pedido_ifood', models.UUIDField(verbose_name='id do pedido no iFood')),
                ('ft_nome_produto', models.CharField(max_length=80, verbose_name='nome do produto')),
                ('fd_imagem_produto', models.URLField(blank=True, default='', verbose_name='complemento')),
                ('ft_unidade', models.CharField(max_length=2, verbose_name='unidade')),
                ('ft_preco_unitario', models.FloatField(default=0, verbose_name='preço unitário')),
                ('ft_quantidade', models.PositiveSmallIntegerField(default=0, verbose_name='quantidade')),
                ('ft_preco_total', models.FloatField(verbose_name='preço total')),
                ('ft_observacao', models.CharField(blank=True, default='', max_length=100, verbose_name='observação')),
            ],
            options={
                'verbose_name': 'Item do Pedido do iFood',
                'verbose_name_plural': 'Itens dos Pedidos do iFood',
                'db_table': 'pedido_item_ifood',
                'ordering': ['-id'],
            },
            bases=(django_multitenant.mixins.TenantModelMixin, django_lifecycle.mixins.LifecycleModelMixin, models.Model),
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
                ('objects', django_multitenant.models.TenantManager()),
            ],
        ),
        migrations.CreateModel(
            name='ProdutoIfood',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ativo', models.BooleanField(default=True, verbose_name='ativo')),
                ('codigo', models.PositiveBigIntegerField(default=1, editable=False, verbose_name='código')),
                ('data_criacao', models.DateField(auto_now_add=True, verbose_name='data de criação')),
                ('hora_criacao', models.TimeField(auto_now_add=True, verbose_name='hora de criação')),
                ('data_ultima_alteracao', models.DateField(auto_now=True, verbose_name='data da última alteração')),
                ('hora_ultima_alteracao', models.TimeField(auto_now=True, verbose_name='hora da última alteração')),
                ('fd_ifood_id', models.UUIDField(null=True, verbose_name='id ifood')),
                ('fd_pizza', models.BooleanField(default=False, verbose_name='é pizza')),
                ('fd_categoria_id', models.UUIDField(null=True, verbose_name='id do grupo do catálogo ifood')),
                ('fd_grupo_catalogo_id', models.UUIDField(null=True, verbose_name='id do grupo do catálogo ifood')),
                ('fd_item_catalogo_id', models.UUIDField(null=True, verbose_name='id do item no catálogo ifood')),
                ('fd_index', models.PositiveSmallIntegerField(default=1, verbose_name='posição no cardápio')),
            ],
            options={
                'verbose_name': 'Dados do Produto no iFood',
                'verbose_name_plural': 'Dados dos Produtos no iFood',
                'db_table': 'dados_produto_ifood',
                'ordering': ['-id'],
            },
            bases=(django_multitenant.mixins.TenantModelMixin, django_lifecycle.mixins.LifecycleModelMixin, models.Model),
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
                ('objects', django_multitenant.models.TenantManager()),
            ],
        ),
        migrations.CreateModel(
            name='CatalogoIfood',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ativo', models.BooleanField(default=True, verbose_name='ativo')),
                ('codigo', models.PositiveBigIntegerField(default=1, editable=False, verbose_name='código')),
                ('data_criacao', models.DateField(auto_now_add=True, verbose_name='data de criação')),
                ('hora_criacao', models.TimeField(auto_now_add=True, verbose_name='hora de criação')),
                ('data_ultima_alteracao', models.DateField(auto_now=True, verbose_name='data da última alteração')),
                ('hora_ultima_alteracao', models.TimeField(auto_now=True, verbose_name='hora da última alteração')),
                ('cc_ifood_id', models.UUIDField(null=True, verbose_name='id do iFood')),
                ('assinatura', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='assinaturas.assinatura', verbose_name='tenant')),
                ('filial', django_multitenant.fields.TenantForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='filiais.filial', verbose_name='filial')),
            ],
            options={
                'verbose_name': 'Catálogo do iFood',
                'verbose_name_plural': 'Catálogos do iFood',
                'db_table': 'catalogo_ifood',
                'ordering': ['-id'],
            },
            bases=(django_multitenant.mixins.TenantModelMixin, django_lifecycle.mixins.LifecycleModelMixin, models.Model),
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
                ('objects', django_multitenant.models.TenantManager()),
            ],
        ),
    ]
