from os import makedirs, remove
from os.path import exists
from shutil import rmtree

from django.conf import settings
from django.core.management.base import BaseCommand
from django.core.management import call_command
from django.db import connection

# TODO colocar opção para gerar arquivo do que foi feito
# TODO colocar opção excluir o sqlite
class Command(BaseCommand):
    help = 'Reseta o histórico de migrações do banco de dados do sistema'

    def handle(self, *args, **options):
        self.reset_migrations_folders()
        print(f'[x] Process finished...')

    def reset_migrations_folders(self):
        self.delete_all_migrations_folders()
        self.create_all_migrations_folders()
        try:
            self.clean_django_migrations_table()
        except:
            pass
        self.do_make_migrations()
        if settings.DATABASES["default"]["ENGINE"] == "django.db.backends.sqlite3":
            remove("db.sqlite3")
            self.apply_migrations()

    def delete_all_migrations_folders(self):
        for app in settings.WCOMMANDA_APPS:
            app_path = app.replace('.', '/')
            migration_path = app_path + '/migrations'
            
            if exists(migration_path):
                rmtree(migration_path)
                print(f'[x] {app} migrations deleted...')
            else:
                print(f'[ ] {app} migrations not found...')
    
        print(f'[x] All migrations deleted...')

    def create_all_migrations_folders(self):
        for app in settings.WCOMMANDA_APPS:
            app_path = app.replace('.', '/')
            migration_path = app_path + '/migrations'
            init_path = migration_path + '/__init__.py'

            if not exists(init_path):
                makedirs(migration_path)
                print(f'[x] {app} migrations folder created...')

            if not exists(init_path):
                with open(init_path, 'x') as f:
                    f.write('# File generated by reset migrations command')
                    f.close()

                print(f'[x] {app} migrations created...')

        print(f'[x] All migrations folders recreated...')

    def clean_django_migrations_table(self):
        cursor = connection.cursor()
        cursor.execute('SELECT * FROM django_migrations')
        rows = cursor.fetchall()

        for row in rows:
            id, app, name, _ = row
            system_apps = ('admin', 'auth', 'contenttypes', 'sessions', 'accounts', 'authtoken')
            if app not in system_apps and name != '0001_initial':
                cursor.execute('DELETE FROM django_migrations WHERE id = %s', [id])
                print(f'[x] Migration {app} - {name} deleted...')
    
    def do_make_migrations(self):
        print(f'[x] Command "makemigrations" executed...')
        call_command('makemigrations')
        print(f'[x] Command "makemigrations" finisehd...')

    def apply_migrations(self):
        call_command('migrate')
        print(f'[x] Command "migrate" executed...')
        print(f'[x] All migrations applied...')

    # NOT USED
    def ask_delete_migrations_folders(self):
        for app in settings.WCOMMANDA_APPS:
            app_path = app.replace('.', '/')
            migration_path = app_path + '/migrations'

            if exists(migration_path):
                rm = input(f'[i] Remove {migration_path}? (y/n): ')
                if rm == 'y':
                    # rmdir(migration_path)
                    print(f'[x] {app} migrations deleted...')
                else:
                    print(f'[ ] {app} migrations not deleted...')
            else:
                print(f'[ ] {app} migrations not found...')
        
        print(f'[x] All migrations deleted...')
