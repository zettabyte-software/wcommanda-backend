import multiprocessing
import os

# ==============================
# üî• CONFIGURA√á√ïES DE OTIMIZA√á√ÉO
# ==============================

# Bind -> Gunicorn escutar√° apenas localmente para ser usado atr√°s do Nginx
bind = "127.0.0.1:8000"

# Workers -> N√∫mero ideal de processos baseados no n√∫mero de n√∫cleos de CPU
workers = multiprocessing.cpu_count() * 2 + 1  # Regra recomendada

# Worker Class -> Usamos "gthread" para APIs, pois suporta requisi√ß√µes concorrentes melhor
worker_class = "gthread"

# Threads -> Define quantas threads cada worker pode usar (bom para APIs REST)
threads = 4  # Ajust√°vel dependendo da carga

# Tempo m√°ximo para resposta (evita travamento)
timeout = 30  # Fecha requisi√ß√µes lentas ap√≥s 30 segundos

# Keepalive -> Mant√©m conex√µes abertas para reutiliza√ß√£o, melhorando a performance
keepalive = 5

# Limita o n√∫mero de conex√µes simult√¢neas para evitar sobrecarga
worker_connections = 1000

# ==============================
# üìú LOGS PARA MONITORAMENTO
# ==============================

# Ativa os logs de acesso e erro
accesslog = "./logs/gunicorn/access.log"
errorlog = "./logs/gunicorn/error.log"

# N√≠vel de log -> "info" √© um bom equil√≠brio entre detalhes e desempenho
loglevel = "info"

# ==============================
# üìà OTIMIZA√á√ïES ADICIONAIS
# ==============================

# Fecha conex√µes inativas para liberar mem√≥ria
graceful_timeout = 30  # Se o worker n√£o responder, ele ser√° reiniciado

# Desativa o daemon (melhor rodar com systemd)
daemon = False

# Maximiza desempenho desativando buffers desnecess√°rios no Gunicorn
preload_app = True  # Carrega a aplica√ß√£o antes de criar os workers

# Melhora o tempo de resposta reduzindo a troca de contexto
limit_request_line = 4094  # Aumenta o tamanho m√°ximo da linha de requisi√ß√£o

# ==============================
# üîÑ GERENCIAMENTO AUTOM√ÅTICO
# ==============================

# Se um worker travar, o Gunicorn o reiniciar√° automaticamente
max_requests = 1000  # Reinicia worker ap√≥s X requisi√ß√µes (evita vazamento de mem√≥ria)
max_requests_jitter = 50  # Evita que todos os workers reiniciem ao mesmo tempo

